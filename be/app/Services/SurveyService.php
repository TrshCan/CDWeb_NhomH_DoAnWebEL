<?php

namespace App\Services;

use App\Models\Survey;
use App\Repositories\SurveyRepository;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\ValidationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Exception;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;



class SurveyService
{
    protected $repository;

    public function __construct(SurveyRepository $repository)
    {
        $this->repository = $repository;
    }

    public function createSurvey(array $data): Survey
    {
        // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh theo schema
        $data = array_merge([
            'type' => 'survey',
            'object' => 'public',
            'points' => 0,
        ], $data);

        // Validation v·ªõi th√¥ng b√°o l·ªói ti·∫øng Vi·ªát (n·∫øu c·∫ßn)
        $validator = Validator::make($data, [
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'categories_id' => 'required|integer|exists:categories,id',
            'type' => 'sometimes|in:survey,quiz',
            'start_at' => 'nullable|date',
            'end_at' => 'nullable|date|after_or_equal:start_at',
            'time_limit' => 'nullable|integer|min:0',
            'points' => 'sometimes|integer|min:0',
            'object' => 'sometimes|in:public,students,lecturers',
            'created_by' => 'required|exists:users,id',
        ], [
            'title.required' => 'Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc.',
            'title.string' => 'Ti√™u ƒë·ªÅ ph·∫£i l√† chu·ªói k√Ω t·ª±.',
            'title.max' => 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'categories_id.required' => 'Danh m·ª•c l√† b·∫Øt bu·ªôc.',
            'categories_id.exists' => 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i.',
            'created_by.required' => 'Ng∆∞·ªùi t·∫°o l√† b·∫Øt bu·ªôc.',
            'created_by.exists' => 'Ng∆∞·ªùi t·∫°o kh√¥ng t·ªìn t·∫°i.',
            'type.in' => 'Lo·∫°i kh·∫£o s√°t ph·∫£i l√† "survey" ho·∫∑c "quiz".',
            'end_at.after_or_equal' => 'Ng√†y k·∫øt th√∫c ph·∫£i sau ho·∫∑c b·∫±ng ng√†y b·∫Øt ƒë·∫ßu.',
            'time_limit.min' => 'Th·ªùi gian gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.',
            'points.min' => 'ƒêi·ªÉm ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.',
            'object.in' => 'ƒê·ªëi t∆∞·ª£ng ph·∫£i l√† "public", "students" ho·∫∑c "lecturers".',
        ]);

        if ($validator->fails()) {
            throw new ValidationException($validator);
        }

        try {
            DB::beginTransaction();
            $survey = $this->repository->create($data);
            DB::commit();
            return $survey;
        } catch (ModelNotFoundException $e) {
            DB::rollBack();
            Log::error('Error creating survey: ' . $e->getMessage(), ['data' => $data]);
            throw new Exception('Danh m·ª•c ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.', 404, $e);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error creating survey: ' . $e->getMessage(), ['data' => $data]);
            throw new Exception('Kh√¥ng th·ªÉ t·∫°o kh·∫£o s√°t.', 500, $e);
        }
    }
    public function deleteSurvey(int $id): bool
    {
        try {
            DB::beginTransaction();

            // T√¨m kh·∫£o s√°t
            $survey = $this->repository->findById($id);

            if (!$survey) {
                throw new ModelNotFoundException("Kh√¥ng t√¨m th·∫•y kh·∫£o s√°t c√≥ ID {$id}");
            }

            // X√≥a m·ªÅm (Soft Delete)
            $survey->delete();

            DB::commit();
            return true;
        } catch (ModelNotFoundException $e) {
            DB::rollBack();
            Log::warning("X√≥a kh·∫£o s√°t th·∫•t b·∫°i: kh√¥ng t√¨m th·∫•y ID {$id}");
            throw new Exception("Kh√¥ng t√¨m th·∫•y kh·∫£o s√°t ƒë·ªÉ x√≥a.", 404);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error deleting survey: ' . $e->getMessage(), ['id' => $id]);
            throw new Exception('Kh√¥ng th·ªÉ x√≥a kh·∫£o s√°t.', 500, $e);
        }
    }

     // üÜï C·∫≠p nh·∫≠t kh·∫£o s√°t
    public function updateSurvey(int $id, array $data): Survey
    {
        $validator = Validator::make($data, [
            'title' => 'sometimes|string|max:255',
            'description' => 'nullable|string',
            'categories_id' => 'sometimes|integer|exists:categories,id',
            'type' => 'sometimes|in:survey,quiz',
            'start_at' => 'nullable|date',
            'end_at' => 'nullable|date|after_or_equal:start_at',
            'time_limit' => 'nullable|integer|min:0',
            'points' => 'sometimes|integer|min:0',
            'object' => 'sometimes|in:public,students,lecturers',
        ]);

        if ($validator->fails()) {
            throw new ValidationException($validator);
        }

        try {
            DB::beginTransaction();

            $survey = $this->repository->findById($id);
            if (!$survey) {
                throw new ModelNotFoundException("Kh√¥ng t√¨m th·∫•y kh·∫£o s√°t c√≥ ID {$id}");
            }

            $updatedSurvey = $this->repository->update($survey, $data);

            DB::commit();
            return $updatedSurvey;
        } catch (ModelNotFoundException $e) {
            DB::rollBack();
            Log::warning("C·∫≠p nh·∫≠t kh·∫£o s√°t th·∫•t b·∫°i: kh√¥ng t√¨m th·∫•y ID {$id}");
            throw new Exception("Kh√¥ng t√¨m th·∫•y kh·∫£o s√°t ƒë·ªÉ c·∫≠p nh·∫≠t.", 404);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error updating survey: ' . $e->getMessage(), ['id' => $id, 'data' => $data]);
            throw new Exception('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh·∫£o s√°t.', 500, $e);
        }
    }

    // üÜï Th√™m ch·ª©c nƒÉng hi·ªÉn th·ªã t·∫•t c·∫£ kh·∫£o s√°t (c√≥ ph√¢n trang)
    public function getAllSurveys(int $perPage = 10)
    {
        try {
            return $this->repository->getAllPaginated($perPage);
        } catch (Exception $e) {
            Log::error('Error fetching surveys: ' . $e->getMessage());
            throw new Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh·∫£o s√°t.', 500, $e);
        }
    }
}